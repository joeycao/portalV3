
user  root;
worker_processes  2;


error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;
error_log  logs/debug.log  debug;

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;
    
    sendfile        on;
    tcp_nopush     on;
    keepalive_timeout  0;
  
    #gzip  on;
	lua_package_path  '/usr/local/openresty/lualib/?.lua;;';	
	
	#prod
	#lua_code_cache on;
	#test
	lua_code_cache off;
	 
    server {
        listen       808;
        server_name  localhost;
        charset utf-8;
        access_log  logs/host.access.log  main;
		
		set $template_root /usr/local/openresty/nginx/html/templates;
		set $template_location /templates;

		 
		default_type text/html;  
		 
		
		location = /tests {
        	content_by_lua_file ../lualib/tests/unit/vrule/test_rule.lua;
        } 
        	 
        location /templates/  {
			 alias /usr/local/openresty/nginx/html/templates/;
		} 
		    		
		location ~ /public/vpage/(.+)\.(html|js|json|xml) {
			default_type text/html;  
			set $page_id $1;		 
			content_by_lua_block {
				local public = require "portal.public"
				local page_id = ngx.var.page_id
				public.view(page_id)	
			}			
		} 
		
		location ~ /public/vcontent/(.+) {
			default_type text/html;  
			set $content_id $1;	
			content_by_lua_block {
				local public = require "portal.public"
				local content_id = ngx.var.content_id
				public.view_content(content_id)	
			}			
		} 
		
		location ~ /management/([a-z_A-Z]+)/([a-zA-Z]+) {
			default_type application/json; 
			set $object $1;
			set $action $2;		 
			content_by_lua_block {
				local object = ngx.var.object
				local action = ngx.var.action
				local dispatcher = require "portal.management.dispatcher"
				dispatcher.dispatch(object,action)	
			}
		} 
		 
    }


   

}
